{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c77c6de5-9c6e-41cb-8170-7e4a8aa475d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"/Users/omkarkalekar/Downloads/hamspam.csv.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "881f6200-dd95-49a8-9153-c260748ae948",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/d8/wx18yll93kgg250hh1ld783c0000gn/T/ipykernel_95249/1537974825.py:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  df = df.replace(binary_mapping)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Convert categorical data to numerical\n",
    "binary_mapping = {\"Yes\": 1, \"No\": 0, \"Long\": 1, \"Short\": 0, \"Spam\": 1, \"Ham\": 0}\n",
    "df = df.replace(binary_mapping)\n",
    "df = df.astype(int)  # Ensures correct type conversion\n",
    "\n",
    "# Define features and target\n",
    "X = df.drop(columns=[\"Class\"])\n",
    "y = df[\"Class\"]\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5397f175-6f73-47df-b46f-71adeae63482",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naïve Bayes Accuracy: 0.54\n",
      "KNN (K=2) Accuracy: 0.53\n"
     ]
    }
   ],
   "source": [
    "# Naïve Bayes Classifier\n",
    "nb_model = GaussianNB()\n",
    "nb_model.fit(X_train, y_train)\n",
    "y_pred_nb = nb_model.predict(X_test)\n",
    "accuracy_nb = accuracy_score(y_test, y_pred_nb)\n",
    "print(f\"Naïve Bayes Accuracy: {accuracy_nb:.2f}\")\n",
    "\n",
    "# K-Nearest Neighbors (KNN, K=2)\n",
    "knn_model = KNeighborsClassifier(n_neighbors=2, metric='euclidean')\n",
    "knn_model.fit(X_train, y_train)\n",
    "y_pred_knn = knn_model.predict(X_test)\n",
    "accuracy_knn = accuracy_score(y_test, y_pred_knn)\n",
    "print(f\"KNN (K=2) Accuracy: {accuracy_knn:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa936d9d-f21e-4583-aac2-a53a7faf4659",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
